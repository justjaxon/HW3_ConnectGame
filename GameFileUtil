package hw3;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import api.Tile;

/**
 * Utility class with static methods for saving and loading game files.
 */
public class GameFileUtil {
	/**
	 * Saves the current game state to a file at the given file path.
	 * <p>
	 * The format of the file is one line of game data followed by multiple lines of
	 * game grid. The first line contains the: width, height, minimum tile level,
	 * maximum tile level, and score. The grid is represented by tile levels. The
	 * conversion to tile values is 2^level, for example, 1 is 2, 2 is 4, 3 is 8, 4
	 * is 16, etc. The following is an example:
	 * 
	 * <pre>
	 * 5 8 1 4 100
	 * 1 1 2 3 1
	 * 2 3 3 1 3
	 * 3 3 1 2 2
	 * 3 1 1 3 1
	 * 2 1 3 1 2
	 * 2 1 1 3 1
	 * 4 1 3 1 1
	 * 1 3 3 3 3
	 * </pre>
	 * 
	 * @param filePath the path of the file to save
	 * @param game     the game to save
	 */
	public static void save(String filePath, ConnectGame game) {
		try {
			// Open file for writing
			BufferedWriter writer = new BufferedWriter(new FileWriter(filePath));

			// Write game parameters to file
			int gridWidth = game.getGrid().getWidth();
			int gridHeight = game.getGrid().getHeight();
			int minTileLevel = game.getMinTileLevel();
			int maxTileLevel = game.getMaxTileLevel();
			long score = game.getScore();
			writer.write(gridWidth + " " + gridHeight + " " + minTileLevel + " " + maxTileLevel + " " + score);

			// Write grid to file
			for (int y = 0; y < gridHeight; y++) {
				writer.write('\n');
				for (int x = 0; x < gridWidth; x++) {
					Tile tile = game.getGrid().getTile(x, y);
					if (tile != null && x == gridWidth - 1) {
						writer.write(tile.getLevel() + "");
					} else if (tile != null) {
						writer.write(tile.getLevel() + " ");
					} else {
						writer.write("0 ");
					}
				}
			}

			// Close file
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Loads the file at the given file path into the given game object. When the
	 * method returns the game object has been modified to represent the loaded
	 * game.
	 * <p>
	 * See the save() method for the specification of the file format.
	 * 
	 * @param filePath the path of the file to load
	 * @param game     the game to modify
	 */
	public static void load(String filePath, ConnectGame game) {
		try (BufferedReader fileReader = new BufferedReader(new FileReader(filePath))) {
			// Read the first line to get grid dimensions, minimum and maximum level, and
			// final score
			String[] firstLineTokens = fileReader.readLine().split(" ");
			int width = Integer.parseInt(firstLineTokens[0]);
			int height = Integer.parseInt(firstLineTokens[1]);
			int minLevel = Integer.parseInt(firstLineTokens[2]);
			int maxLevel = Integer.parseInt(firstLineTokens[3]);
			int finalScore = Integer.parseInt(firstLineTokens[4]);

			// Create a new grid based on the dimensions read from the file
			Grid grid = new Grid(width, height);

			// Set the minimum level, maximum level, and final score for the game
			game.setMinTileLevel(minLevel);
			game.setMaxTileLevel(maxLevel);
			game.setScore(finalScore);

			// Read the remaining lines to populate the grid
			for (int y = 0; y < height; y++) {
				String[] rowTokens = fileReader.readLine().split(" ");
				for (int x = 0; x < width; x++) {
					int tileLevel = Integer.parseInt(rowTokens[x]);
					Tile tile = new Tile(tileLevel);
					grid.setTile(tile, x, y);
				}
			}

			// Set the game's grid to the loaded grid
			game.setGrid(grid);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
