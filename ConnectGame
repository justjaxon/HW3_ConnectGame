package hw3;

import java.util.ArrayList;
import java.util.Random;

import api.ScoreUpdateListener;
import api.ShowDialogListener;
import api.Tile;

/**
 * Class that models a game.
 */
public class ConnectGame

{
	private Grid grid;
	private ArrayList<Tile> list = new ArrayList<>();

	private int tileWidth;
	private int tileHeight;
	private int minGridSize;
	private int maxGridSize;

	private long gameScore;
	private ScoreUpdateListener scoreListener;
	private ShowDialogListener dialogListener;

	/**
	 * Constructs a new ConnectGame object with given grid dimensions and minimum
	 * and maximum tile levels.
	 * 
	 * @param width  grid width
	 * @param height grid height
	 * @param min    minimum tile level
	 * @param max    maximum tile level
	 * @param rand   random number generator
	 */
	public ConnectGame(int width, int height, int min, int max, Random rand) {
		grid = new Grid(width, height);
		tileWidth = width;
		tileHeight = height;
		minGridSize = min;
		maxGridSize = max;
	}

	/**
	 * Gets a random tile with level between minimum tile level inclusive and
	 * maximum tile level exclusive. For example, if minimum is 1 and maximum is 4,
	 * the random tile can be either 1, 2, or 3.
	 * <p>
	 * DO NOT RETURN TILES WITH MAXIMUM LEVEL
	 * 
	 * @return a tile with random level between minimum inclusive and maximum
	 *         exclusive
	 */
	public Tile getRandomTile() {
		Random rand = new Random();
		int level = rand.nextInt(maxGridSize - minGridSize) + minGridSize;
		return new Tile(level);
	}

	/**
	 * Regenerates the grid with all random tiles produced by getRandomTile().
	 */
	public void radomizeTiles() {
		for (int h = 0; h < tileHeight; h++) {
			for (int w = 0; w < tileWidth; w++) {
				grid.setTile(getRandomTile(), w, h);
			}
		}
	}

	/**
	 * Determines if two tiles are adjacent to each other. The may be next to each
	 * other horizontally, vertically, or diagonally.
	 * 
	 * @param t1 one of the two tiles
	 * @param t2 one of the two tiles
	 * @return true if they are next to each other horizontally, vertically, or
	 *         diagonally on the grid, false otherwise
	 */
	public boolean isAdjacent(Tile t1, Tile t2) {
		int x1 = t1.getX();
		int y1 = t1.getY();
		int x2 = t2.getX();
		int y2 = t2.getY();

		if (y1 == y2 && Math.abs(x1 - x2) == 1) {
			return true;
		} else if (x1 == x2 && Math.abs(y1 - y2) == 1) {
			return true;
		} else if (Math.abs(x1 - x2) == 1 && Math.abs(y1 - y2) == 1) {
			return true;
		}

		return false;
	}

	/**
	 * Indicates the user is trying to select (clicked on) a tile to start a new
	 * selection of tiles.
	 * <p>
	 * If a selection of tiles is already in progress, the method should do nothing
	 * and return false.
	 * <p>
	 * If a selection is not already in progress (this is the first tile selected),
	 * then start a new selection of tiles and return true.
	 * 
	 * @param x the column of the tile selected
	 * @param y the row of the tile selected
	 * @return true if this is the first tile selected, otherwise false
	 */
	public boolean tryFirstSelect(int x, int y) {
		if (list.isEmpty()) {
			Tile currentTile = grid.getTile(x, y);
			currentTile.setSelect(true);
			list.add(currentTile);
			return true;
		}
		return false;
	}

	/**
	 * Indicates the user is trying to select (mouse over) a tile to add to the
	 * selected sequence of tiles. The rules of a sequence of tiles are:
	 * 
	 * <pre>
	 * 1. The first two tiles must have the same level.
	 * 2. After the first two, each tile must have the same level or one greater than the level of the previous tile.
	 * </pre>
	 * 
	 * For example, given the sequence: 1, 1, 2, 2, 2, 3. The next selected tile
	 * could be a 3 or a 4. If the use tries to select an invalid tile, the method
	 * should do nothing. If the user selects a valid tile, the tile should be added
	 * to the list of selected tiles.
	 * 
	 * @param x the column of the tile selected
	 * @param y the row of the tile selected
	 */
	public void tryContinueSelect(int x, int y) {

		Tile currentTile = grid.getTile(x, y);

		if (list.size() > 1 && currentTile == list.get(list.size() - 2)) {
			Tile secondLastTile = list.get(list.size() - 1);
			secondLastTile.setSelect(false);
			list.remove(list.size() - 1);
			return;
		}

		if (!currentTile.isSelected() && isAdjacent(currentTile, list.get(list.size() - 1))) {

			int initialLevel = list.get(0).getLevel();
			int finalLevel = list.get(list.size() - 1).getLevel();
			int currentTileLevel = currentTile.getLevel();

			if (list.size() == 1) {
				if (currentTileLevel == initialLevel) {
					currentTile.setSelect(true);
					list.add(currentTile);
				}
			} else if (currentTileLevel == finalLevel || currentTileLevel == finalLevel + 1) {
				currentTile.setSelect(true);
				list.add(currentTile);
			}
		}
	}

	/**
	 * Indicates the user is trying to finish selecting (click on) a sequence of
	 * tiles. If the method is not called for the last selected tile, it should do
	 * nothing and return false. Otherwise it should do the following:
	 * 
	 * <pre>
	 * 1. When the selection contains only 1 tile reset the selection and make sure all tiles selected is set to false.
	 * 2. When the selection contains more than one block:
	 *     a. Upgrade the last selected tiles with upgradeLastSelectedTile().
	 *     b. Drop all other selected tiles with dropSelected().
	 *     c. Reset the selection and make sure all tiles selected is set to false.
	 * </pre>
	 * 
	 * @param x the column of the tile selected
	 * @param y the row of the tile selected
	 * @return return false if the tile was not selected, otherwise return true
	 */
	public boolean tryFinishSelection(int x, int y) {
		Tile lastTile = list.get(list.size() - 1);
		if (!lastTile.equals(grid.getTile(x, y))) {
			return false;
		}
		if (list.size() == 1) {
			lastTile.setSelect(false);
			list.clear();
			return true;
		}
		int totalScore = 0;
		for (Tile tile : list) {
			totalScore += tile.getValue();
			tile.setSelect(false);
		}
		gameScore += totalScore;
		upgradeLastSelectedTile();
		dropSelected();
		list.clear();
		setScore(gameScore);
		scoreListener.updateScore(gameScore);
		return true;
	}

	/**
	 * Increases the level of the last selected tile by 1 and removes that tile from
	 * the list of selected tiles. The tile itself should be set to unselected.
	 * <p>
	 * If the upgrade results in a tile that is greater than the current maximum
	 * tile level, both the minimum and maximum tile level are increased by 1. A
	 * message dialog should also be displayed with the message "New block 32,
	 * removing blocks 2". Not that the message shows tile values and not levels.
	 * Display a message is performed with dialogListener.showDialog("Hello,
	 * World!");
	 */
	public void upgradeLastSelectedTile() {

		if (list.isEmpty()) {
			return;
		}

		Tile lastTile = list.get(list.size() - 1);
		int updateLev = lastTile.getLevel() + 1;
		lastTile.setSelect(false);

		if (maxGridSize < updateLev) {
			minGridSize++;
			maxGridSize++;
			dialogListener.showDialog(
					String.format("New block %d, removing blocks %d", lastTile.getLevel(), lastTile.getLevel()));
		} else {
			lastTile.setLevel(updateLev);
		}

		list.remove(lastTile);

	}

	/**
	 * Gets the selected tiles in the form of an array. This does not mean selected
	 * tiles must be stored in this class as a array.
	 * 
	 * @return the selected tiles in the form of an array
	 */
	public Tile[] getSelectedAsArray() {

		return list.toArray(new Tile[list.size()]);
	}

	/**
	 * Removes all tiles of a particular level from the grid. When a tile is
	 * removed, the tiles above it drop down one spot and a new random tile is
	 * placed at the top of the grid.
	 * 
	 * @param level the level of tile to remove
	 */
	public void dropLevel(int level) {
		// Iterate over each column in the grid
		for (int x = 0; x < grid.getWidth(); x++) {
			// Create a list of tiles to drop down in this column
			ArrayList<Tile> columnTiles = new ArrayList<>();
			for (int y = 0; y < grid.getHeight(); y++) {
				Tile tile = grid.getTile(x, y);
				if (tile.getLevel() != level) {
					columnTiles.add(tile);
				}
			}

			// Fill the remaining spaces in the column with random tiles
			while (columnTiles.size() < grid.getHeight()) {
				columnTiles.add(0, getRandomTile());
			}

			// Set the tiles in the column to their new positions
			for (int y = 0; y < grid.getHeight(); y++) {
				grid.setTile(columnTiles.get(y), x, y);
			}
		}
	}

	/**
	 * Removes all selected tiles from the grid. When a tile is removed, the tiles
	 * above it drop down one spot and a new random tile is placed at the top of the
	 * grid.
	 */
	public void dropSelected() {

		// If the selection list is empty, do nothing and return
		if (list.isEmpty()) {
			return;
		}

		// Identify the columns that need to be updated
		ArrayList<Integer> columnsToUpdate = new ArrayList<>();
		for (Tile tile : list) {
			int column = tile.getX();
			if (!columnsToUpdate.contains(column)) {
				columnsToUpdate.add(column);
			}
		}

		// Update each column that needs to be updated
		for (int column : columnsToUpdate) {
			// Create a list of tiles to drop down in this column
			ArrayList<Tile> columnTiles = new ArrayList<>();
			for (int row = 0; row < grid.getHeight(); row++) {
				Tile tile = grid.getTile(column, row);
				if (!list.contains(tile)) {
					columnTiles.add(tile);
				}
			}

			// Fill the remaining spaces in the column with random tiles
			int droppingTiles = grid.getHeight() - columnTiles.size();
			for (int i = 0; i < droppingTiles; i++) {
				columnTiles.add(0, getRandomTile());
			}

			// Set the tiles in the column to their new positions
			for (int row = 0; row < grid.getHeight(); row++) {
				grid.setTile(columnTiles.get(row), column, row);
			}
		}

		// Clear the selection list
		list.clear();
	}

	/**
	 * Remove the tile from the selected tiles.
	 * 
	 * @param x column of the tile
	 * @param y row of the tile
	 */
	public void unselect(int x, int y) {
	    Tile mainTile = grid.getTile(x, y);
	    if (mainTile.isSelected()) {
	        mainTile.setSelect(false);
	        list.remove(mainTile);
	    }
	}

	/**
	 * Gets the player's score.
	 * 
	 * @return the score
	 */
	public long getScore() {

		return gameScore;
	}

	/**
	 * Gets the game grid.
	 * 
	 * @return the grid
	 */
	public Grid getGrid() {

		return grid;
	}

	/**
	 * Gets the minimum tile level.
	 * 
	 * @return the minimum tile level
	 */
	public int getMinTileLevel() {

		return minGridSize;
	}

	/**
	 * Gets the maximum tile level.
	 * 
	 * @return the maximum tile level
	 */
	public int getMaxTileLevel() {

		return maxGridSize;
	}

	/**
	 * Sets the player's score.
	 * 
	 * @param score number of points
	 */
	public void setScore(long score) {

		gameScore = score;
	}

	/**
	 * Sets the game's grid.
	 * 
	 * @param grid game's grid
	 */
	public void setGrid(Grid grid) {

		this.grid = grid;
	}

	/**
	 * Sets the minimum tile level.
	 * 
	 * @param minTileLevel the lowest level tile
	 */
	public void setMinTileLevel(int minTileLevel) {

		minGridSize = minTileLevel;
	}

	/**
	 * Sets the maximum tile level.
	 * 
	 * @param maxTileLevel the highest level tile
	 */
	public void setMaxTileLevel(int maxTileLevel)

	{

		maxGridSize = maxTileLevel;
	}

	/**
	 * Sets callback listeners for game events.
	 * 
	 * @param dialogListener listener for creating a user dialog
	 * @param scoreListener  listener for updating the player's score
	 */
	public void setListeners(ShowDialogListener dialogListener, ScoreUpdateListener scoreListener) {
		this.dialogListener = dialogListener;
		this.scoreListener = scoreListener;
	}

	/**
	 * Save the game to the given file path.
	 * 
	 * @param filePath location of file to save
	 */
	public void save(String filePath) {
		GameFileUtil.save(filePath, this);
	}

	/**
	 * Load the game from the given file path
	 * 
	 * @param filePath location of file to load
	 */
	public void load(String filePath) {
		GameFileUtil.load(filePath, this);
	}
}
